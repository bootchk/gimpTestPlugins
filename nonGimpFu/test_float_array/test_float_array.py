#!/usr/bin/env python3

import sys

import gi
gi.require_version('Gimp', '3.0')
from gi.repository import Gimp
from gi.repository import GObject
from gi.repository import GLib
from gi.repository import Gio


import gettext
_ = gettext.gettext
def N_(message): return message


"""
This tests passing an array to a libgimp routine.

At one time, it was broken (since annotation ) to Gimp.pencil was wrong.
"""

def foo_with_pdb():

    # the foo you want to test
    args = Gimp.ValueArray.new(3)
    #args.insert(0, GObject.Value(Gimp.RunMode, Gimp.RunMode.NONINTERACTIVE))
    args.insert(0, GObject.Value(Gimp.Drawable.__gtype__, drawable))
    args.insert(1, GObject.Value(GObject.TYPE_INT, 4))

    # There is no GObject.TYPE_ARRAY
    #args.insert(3, GObject.Value(GObject.TYPE_ARRAY, (100.0, 100.0, 100.0, 100.0)))
    # args.insert(3, GObject.Value(Gimp.FloatArray.__gtype__, (100.0, 100.0, 100.0, 100.0)))

    # Use method for new GimpFloatArray from a GArray generated by PyGObject
    # gfa = Gimp.gimp_float_array_from_garray((100.0, 100.0, 100.0, 100.0))

    #  "Passing arguments to gi.types.Boxed.__init__() is deprecated."
    # gfa = Gimp.FloatArray((100.0, 100.0, 100.0, 100.0), 4)

    # test create, then assign.
    # this fails because it destroys the type of gfa
    #gfa = Gimp.FloatArray()
    #gfa = (100.0, 100.0, 100.0, 100.0)

    # test the copy() method
    # this fails because copy() takes one arg
    #gfa = Gimp.FloatArray()
    #gfa.copy((100.0, 100.0, 100.0, 100.0), 4)

    # test an uninitialized
    # Fails with seg fault
    # gfa = Gimp.FloatArray()

    # Test calling new()
    # gfa.new((100.0, 100.0, 100.0, 100.0), 4, True)
    # TypeError: constructor returned NULL
    #gfa = Gimp.FloatArray()
    #print(gfa)
    #gfa.new( [100.0, 100.0, 100.0, 100.0], 4, True )

    # test calling new
    # !!! Examples on net show this should work???
    # Works, but free(): invalid pointer
    # gfa = Gimp.FloatArray.new( [100.0, 100.0, 400.0, 400.0], 4, True)

    gfa = Gimp.FloatArray.from_garray( [100.0, 100.0, 400.0, 400.0], 4)

    # !!! Not free(): invalid if break up the stmt !!!!

    # test not-static
    # same result as for static_data = True
    # gfa = Gimp.FloatArray.new( [100.0, 100.0, 400.0, 400.0], 4, False)

    print(f"Created gfa, length: {gfa.length}, {gfa.data}")

    go = GObject.Value(Gimp.FloatArray.__gtype__, gfa)
    print("Created gvalue")

    args.insert(2, go)
    print("Inserted gvalue")
    print(f"args: {args}")
    print(f"args[2]: {args.index(2)}")

    img = Gimp.get_pdb().run_procedure('gimp-pencil', args)
    print("Called gimp-pencil")

    # test keeping gfa in scope. A: not help
    # print(f"gfa: {gfa}")

    # Gimpfu equivalent:
    #Gimp.get_pdb().gimp_pencil(drawable, 4, (100.0, 100.0, 100.0, 100.0))





def foo(procedure, run_mode, image, drawable, args, data):

    # Note this is not a call to the PDB, but to a GI'd libgimp routine.

    # result = Gimp.pencil(drawable, 4, [100.0, 100.0, 400.0, 400.0])
    #fails: TypeError: Gimp.pencil() takes exactly 2 arguments (3 given)

    result = Gimp.pencil(drawable, [100.0, 100.0, 400.0, 400.0])

    print("test array in call to Gimp.pencil succeeded.\n")

    return procedure.new_return_values(Gimp.PDBStatusType.SUCCESS, GLib.Error())



class Foo (Gimp.PlugIn):
    ## Parameters ##

    ## GimpPlugIn virtual methods ##
    def do_query_procedures(self):
        self.set_translation_domain("gimp30-python",
                                    Gio.file_new_for_path(Gimp.locale_directory()))

        return [ 'python-fu-test-array-to-libgimp' ]  # Return procedure name, elsewhere this is "name"

    def do_create_procedure(self, name):
        procedure = Gimp.ImageProcedure.new(self, name,
                                            Gimp.PDBProcType.PLUGIN,
                                            foo, None)
        procedure.set_image_types("*");
        procedure.set_documentation (N_("Test array to libgimp"),
                                     "Tests PyGObject marshalling.",
                                     name)
        procedure.set_menu_label(N_("_Test array to libgimp Gimp.pencil"))
        procedure.set_attribution("Konneker",
                                  "Konneker",
                                  "2020")
        procedure.add_menu_path ("<Image>/Test")
        return procedure

Gimp.main(Foo.__gtype__, sys.argv)
